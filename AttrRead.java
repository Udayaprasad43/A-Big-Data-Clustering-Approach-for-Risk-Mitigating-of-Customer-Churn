



import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;





public class AttrRead extends javax.swing.JFrame {

    public ArrayList<String> allAttributes = new  ArrayList<String>();
    public ArrayList<String> allSelectedAttributes = new ArrayList<String>();
    public ArrayList<String> aprioriPatternFinal4Churn = new ArrayList<String>();
    
    public String seedPattern = new String();
    
    public AttrRead() {
    	
        initComponents();
    }
    
    
    public AttrRead(ArrayList<String> allAttrs , ArrayList<String> selAtt) {
        allAttributes.clear();
        allAttributes = allAttrs;
        allSelectedAttributes.clear();
        allSelectedAttributes = selAtt;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        allApriori = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        allApriori.setColumns(20);
        allApriori.setRows(5);
        jScrollPane1.setViewportView(allApriori);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 857, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
       try{
       
       for(int i=0;i<allSelectedAttributes.size();i++){
          allApriori.append(allSelectedAttributes.get(i)+"\r\n");
       }
       
       allApriori.append("apriori starts...\r\n");
       allApriori.append("-----------------------\r\n");
       
       for(int i=0;i<allSelectedAttributes.size();i++){
           seedPattern = seedPattern+allSelectedAttributes.get(i)+" ";
       }
       allApriori.append("seed pattern\r\n");
       allApriori.append(seedPattern+"\r\n");
       
       allApriori.append("-----------------------\r\n");
       aprioriPatternFinal4Churn.clear();
       
       ArrayList<String> allClearedItems = new ArrayList<String>();
       allClearedItems.clear();
       allClearedItems = (ArrayList<String>)allAttributes.clone();
       allClearedItems.removeAll(allSelectedAttributes);
       
       System.out.println(allClearedItems);
       allApriori.append("-----------------------\r\n");
       allApriori.append(allClearedItems+"\r\n");
       allApriori.append("apriori\r\n");
       
       aprioriPatternFinal4Churn.clear();
       int k = 0;
       for(int i=0;i<allClearedItems.size();i++){
           String mainString = seedPattern;
           for(int j=k;j<allClearedItems.size();j++){
               mainString += allClearedItems.get(j)+" ";
               aprioriPatternFinal4Churn.add(mainString);
           }
           mainString = "";
           k = k+1;
       }
       for(int i=0;i<aprioriPatternFinal4Churn.size();i++){
       //System.out.println(aprioriPatternFinal4Churn.get(i));
       }
       
       
       //////////
         ArrayList<Float> Acc = new ArrayList<Float>();
         ArrayList<Float> DayM = new ArrayList<Float>();
         ArrayList<Float> EveM = new ArrayList<Float>();
         ArrayList<Float> NightM = new ArrayList<Float>();
         ArrayList<Float> IntlM = new ArrayList<Float>();
         ArrayList<Float> DayC = new ArrayList<Float>();
         ArrayList<Float> DayCh = new ArrayList<Float>();
         ArrayList<Float> EveC = new ArrayList<Float>();
         ArrayList<Float> EveCh = new ArrayList<Float>();
         ArrayList<Float> NightC = new ArrayList<Float>();
         ArrayList<Float> NightCh = new ArrayList<Float>();
         ArrayList<Float> IntlC = new ArrayList<Float>();
         ArrayList<String> State = new ArrayList<String>();
         ArrayList<Float> AreaC = new ArrayList<Float>();
         ArrayList<String> Phone = new ArrayList<String>();
         
         
         ArrayList<String> AccT = new ArrayList<String>();
         ArrayList<String> DayMT = new ArrayList<String>();
         ArrayList<String> EveMT = new ArrayList<String>();
         ArrayList<String> NightMT = new ArrayList<String>();
         ArrayList<String> IntlMT = new ArrayList<String>();
         ArrayList<String> DayCT = new ArrayList<String>();
         ArrayList<String> DayChT = new ArrayList<String>();
         ArrayList<String> EveCT = new ArrayList<String>();
         ArrayList<String> EveChT = new ArrayList<String>();
         ArrayList<String> NightCT = new ArrayList<String>();
         ArrayList<String> NightChT = new ArrayList<String>();
         ArrayList<String> IntlCT = new ArrayList<String>();
         ArrayList<String> StateT = new ArrayList<String>();
         ArrayList<String> AreaCT = new ArrayList<String>();
         ArrayList<String> PhoneT = new ArrayList<String>();
         
         ArrayList<Integer> pTCount = new ArrayList<Integer>();
         ArrayList<Integer> nTCount = new ArrayList<Integer>();
         
         
         AccT.clear();
         DayMT.clear();
         EveMT.clear();
         NightMT.clear();
         IntlMT.clear();
         DayCT.clear();
         DayChT.clear();
         EveCT.clear();
         EveChT.clear();
         NightCT.clear();
         NightChT.clear();
         IntlCT.clear();
         StateT.clear();
         AreaCT.clear();
         PhoneT.clear();
              
         FileInputStream fisAccT = new FileInputStream("objects/1.txt");
         ObjectInputStream oisAccT = new ObjectInputStream(fisAccT);
         AccT = (ArrayList<String>)oisAccT.readObject();
         oisAccT.close();
         fisAccT.close();
         
         FileInputStream fisDayMT = new FileInputStream("objects/3.txt");
         ObjectInputStream oisDayMT = new ObjectInputStream(fisDayMT);
         DayMT = (ArrayList<String>)oisDayMT.readObject();
         oisDayMT.close();
         fisDayMT.close();
         
         FileInputStream fisEveMT = new FileInputStream("objects/4.txt");
         ObjectInputStream oisEveMT = new ObjectInputStream(fisEveMT);
         EveMT = (ArrayList<String>)oisEveMT.readObject();
         oisEveMT.close();
         fisEveMT.close();
         
         FileInputStream fisNightMT = new FileInputStream("objects/5.txt");
         ObjectInputStream oisNightMT = new ObjectInputStream(fisNightMT);
         NightMT = (ArrayList<String>)oisNightMT.readObject();
         oisNightMT.close();
         fisNightMT.close();
         
         FileInputStream fisIntlMT = new FileInputStream("objects/6.txt");
         ObjectInputStream oisIntlMT = new ObjectInputStream(fisIntlMT);
         IntlMT = (ArrayList<String>)oisIntlMT.readObject();
         oisIntlMT.close();
         fisIntlMT.close();
         
         FileInputStream fisDayCT = new FileInputStream("objects/11.txt");
         ObjectInputStream oisDayCT = new ObjectInputStream(fisDayCT);
         DayCT = (ArrayList<String>)oisDayCT.readObject();
         oisDayCT.close();
         fisDayCT.close();
         
         FileInputStream fisDayChT = new FileInputStream("objects/12.txt");
         ObjectInputStream oisDayChT = new ObjectInputStream(fisDayChT);
         DayChT = (ArrayList<String>)oisDayChT.readObject();
         oisDayChT.close();
         fisDayChT.close();
         
         FileInputStream fisEveCT = new FileInputStream("objects/13.txt");
         ObjectInputStream oisEveCT  = new ObjectInputStream(fisEveCT);
         EveCT = (ArrayList<String>)oisEveCT.readObject();
         oisEveCT.close();
         fisEveCT.close();
         
         FileInputStream fisEveChT = new FileInputStream("objects/14.txt");
         ObjectInputStream oisEveChT  = new ObjectInputStream(fisEveChT);
         EveChT = (ArrayList<String>)oisEveChT.readObject();
         oisEveChT.close();
         fisEveChT.close();
         
         FileInputStream fisNightCT = new FileInputStream("objects/15.txt");
         ObjectInputStream oisNightCT  = new ObjectInputStream(fisNightCT);
         NightCT = (ArrayList<String>)oisNightCT.readObject();
         oisNightCT.close();
         fisNightCT.close();
         
         FileInputStream fisNightChT = new FileInputStream("objects/16.txt");
         ObjectInputStream oisNightChT  = new ObjectInputStream(fisNightChT);
         NightChT = (ArrayList<String>)oisNightChT.readObject();
         oisNightChT.close();
         fisNightChT.close();
         
         FileInputStream fisIntlCT = new FileInputStream("objects/17.txt");
         ObjectInputStream oisIntlCT  = new ObjectInputStream(fisIntlCT);
         IntlCT = (ArrayList<String>)oisIntlCT.readObject();
         oisIntlCT.close();
         fisIntlCT.close();
         
         FileInputStream fisStateT = new FileInputStream("objects/19.txt");
         ObjectInputStream oisStateT  = new ObjectInputStream(fisStateT);
         StateT = (ArrayList<String>)oisStateT.readObject();
         oisStateT.close();
         fisStateT.close();
         
         FileInputStream fisAreaCT = new FileInputStream("objects/20.txt");
         ObjectInputStream oisAreaCT  = new ObjectInputStream(fisAreaCT);
         AreaCT = (ArrayList<String>)oisAreaCT.readObject();
         oisAreaCT.close();
         fisAreaCT.close();
         
         FileInputStream fisPhoneT = new FileInputStream("objects/21.txt");
         ObjectInputStream oisPhoneT = new ObjectInputStream(fisPhoneT);
         PhoneT = (ArrayList<String>)oisPhoneT.readObject(); 
         oisPhoneT.close();
         fisPhoneT.close();
                 
         for(int i=0;i<AccT.size();i++){
             String ttt = AccT.get(i);
             Acc.add(Float.parseFloat(ttt));
         }
         
         
         for(int i=0;i<DayMT.size();i++){
             String ttt = DayMT.get(i);
             DayM.add(Float.parseFloat(ttt));
         }
         
         
         for(int i=0;i<EveMT.size();i++){
             String ttt = EveMT.get(i);
             EveM.add(Float.parseFloat(ttt));
         }
         
         
         for(int i=0;i<NightMT.size();i++){
             String ttt = NightMT.get(i);
             NightM.add(Float.parseFloat(ttt));
         }
         
         
         for(int i=0;i<IntlMT.size();i++){
             String ttt = IntlMT.get(i);
             IntlM.add(Float.parseFloat(ttt));
         }
         
         for(int i=0;i<DayCT.size();i++){
             String ttt = DayCT.get(i);
             DayC.add(Float.parseFloat(ttt));
         }
         
         
         for(int i=0;i<DayChT.size();i++){
             String ttt = DayChT.get(i);
             DayCh.add(Float.parseFloat(ttt));
         }
         
         
         for(int i=0;i<EveCT.size();i++){
             String ttt = EveCT.get(i);
             EveC.add(Float.parseFloat(ttt));
         }
         
         
         for(int i=0;i<EveChT.size();i++){
             String ttt = EveChT.get(i);
             EveCh.add(Float.parseFloat(ttt));
         }
         
         
         for(int i=0;i<NightCT.size();i++){
             String ttt = NightCT.get(i);
             NightC.add(Float.parseFloat(ttt));
         }
         
         
         for(int i=0;i<NightChT.size();i++){
             String ttt = NightChT.get(i);
             NightCh.add(Float.parseFloat(ttt));
         }
         
         for(int i=0;i<IntlCT.size();i++){
             String ttt = IntlCT.get(i);
             IntlC.add(Float.parseFloat(ttt));
         }
         
         State = StateT;         
         
        for(int i=0;i<AreaCT.size();i++){
        String ttt = AreaCT.get(i);
        AreaC.add(Float.parseFloat(ttt));
         }
       
        pTCount.clear();
        nTCount.clear();
        int pCount = 0;
        int nCount  = 0;
       
        for(int i=0;i<Acc.size();i++){
          float actLen = Acc.get(i);
          float dayMin = DayM.get(i);
          float eveMin = EveM.get(i);
          float nigtM = NightM.get(i);
          float intlM = IntlM.get(i);
          float dCals = DayC.get(i);
          float dChar = DayCh.get(i);
          float eCls = EveC.get(i);
          float eCh = EveC.get(i);
          float ngCls = NightC.get(i);
          float ngCh = NightCh.get(i);
          float intCls = IntlC.get(i);
          String stat = State.get(i);
          float ara = AreaC.get(i);          
          
          if(actLen >= Threshold_Churn.AccountLength){
              ++pCount;
          }
          else if(actLen < Threshold_Churn.AccountLength){
              ++nCount;
          }
          
         
          if(dayMin >= Threshold_Churn.DayMins){
              ++pCount;
          }
          else if(dayMin < Threshold_Churn.DayMins){
              ++nCount;
          }
         
          
          
          if(eveMin >= Threshold_Churn.EveMins){
              ++pCount;
          }
          else if(eveMin < Threshold_Churn.EveMins){
              ++nCount;
          }
          
          
          
          if(nigtM >= Threshold_Churn.NightMins){
              ++pCount;
          }
          else if(nigtM < Threshold_Churn.NightMins){
              ++nCount;
          }
          
          
          
          if(intlM >= Threshold_Churn.IntlMins){
              ++pCount;
          }
          else if(intlM < Threshold_Churn.IntlMins){
              ++nCount;
          }
         
         
          
          if(dCals >= Threshold_Churn.DayCalls){
              ++pCount;
          }
          else if(dCals < Threshold_Churn.DayCalls){
              ++nCount;
          }
         
          
          if(dChar >= Threshold_Churn.DayCharge){
              ++pCount;
          }
          else if(dChar < Threshold_Churn.DayCharge){
              ++nCount;
          }
         
         
          
          if(eCls >= Threshold_Churn.EveCalls){
              ++pCount;
          }
          else if(eCls < Threshold_Churn.EveCalls){
              ++nCount;
          }
          
          
          
          if(eCh >= Threshold_Churn.EveCharge){
              ++pCount;
          }
          else if(eCh < Threshold_Churn.EveCharge){
              ++nCount;
          }
         
          
          
          if(ngCls >= Threshold_Churn.NightCalls){
              ++pCount;
          }
          else if(ngCls < Threshold_Churn.NightCalls){
              ++nCount;
          }
        
          
          if(ngCh >= Threshold_Churn.NightCharge){
              ++pCount;
          }
          else if(ngCh < Threshold_Churn.NightCharge){
              ++nCount;
          }
         
          
          
          if(intCls >= Threshold_Churn.IntlCalls){
              ++pCount;
          }
          else if(intCls < Threshold_Churn.IntlCalls){
              ++nCount;
          }
          pTCount.add(pCount);
          nTCount.add(nCount);
          pCount = 0;
          nCount  = 0;
          
          
        }
          
         // System.out.println(pTCount.size()+"  "+nTCount.size());
          for(int i=0;i<pTCount.size();i++){
               //System.out.println(pTCount.get(i)+"  "+nTCount.get(i));
          }
          
                         
          ArrayList<Integer> allChurnIndexes = new ArrayList<Integer>();
          allChurnIndexes.clear();
          for(int i=0;i<nTCount.size();i++){
              int nnn = nTCount.get(i);
              if(nnn >=0){
                  allChurnIndexes.add(i);
              }
          }
       
          System.out.println(allChurnIndexes.size());
          for(int i=0;i<allChurnIndexes.size();i++){
             //System.out.println(PhoneT.get(allChurnIndexes.get(i)));
          }
       
          
          ArrayList<Double> allChurnsIndividuals = new ArrayList<Double>();
          allChurnsIndividuals.clear();
          for(int i=0;i<nTCount.size();i++){
              int nn = nTCount.get(i);
              double dd = (double)nn/12;
              allChurnsIndividuals.add((double)dd*100);
          }
          
          
          for(int i=0;i<allChurnIndexes.size();i++){
             //System.out.println(PhoneT.get(allChurnIndexes.get(i)) +" "+allChurnsIndividuals.get(i)+" %");
             allApriori.append(PhoneT.get(allChurnIndexes.get(i)) +" -  "+allChurnsIndividuals.get(i)+" %\r\n" );
          }
          
       //////////
       
       
       }catch(Exception e){
           System.out.println(e);
       }
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AttrRead.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AttrRead.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AttrRead.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AttrRead.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	AttrRead aa=new AttrRead();
            	aa.setVisible(true);
            	aa.setSize(1300,730);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea allApriori;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
